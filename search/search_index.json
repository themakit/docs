{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ThemaKit","text":"<p>Modern UI Components for React</p> <p>Build beautiful, consistent interfaces with our themeable component library.</p>"},{"location":"#installation","title":"Installation","text":"<p>Get started with ThemaKit in your React project:</p> <p>Installation \u2192</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Fully Customizable: Theme every aspect of your components with our powerful theming system.</li> <li>Type-Safe: Built with TypeScript for a robust development experience.</li> <li>Accessible: WCAG 2.1 compliant components out of the box.</li> <li>Modern Stack: React 18+, CSS-in-JS, and zero jQuery dependencies.</li> </ul>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code>import { ThemeProvider } from '@themakit/core';\nimport { Button } from '@themakit/button';\nimport { defaultTheme } from '@themakit/theme';\n\nfunction App() {\n    return (\n        &lt;ThemeProvider theme={defaultTheme}&gt;\n            &lt;Button variant=\"primary\"&gt;Get Started&lt;/Button&gt;\n        &lt;/ThemeProvider&gt;\n    );\n}\n</code></pre>"},{"location":"animations/keyframes/","title":"Dark Mode","text":"<p>ThemaKit supports dark mode, allowing you to create a visually appealing experience for users in low-light environments.</p>"},{"location":"animations/keyframes/#enabling-dark-mode","title":"Enabling Dark Mode","text":"<p>You can enable dark mode by creating a custom theme with a dark color palette.</p> <pre><code>import { createTheme, ThemeProvider } from '@themakit/theme';\n\nconst darkTheme = createTheme({\n  palette: {\n    background: '#121212',\n    text: '#ffffff',\n    primary: '#bb86fc',\n    accent: '#03dac6',\n  },\n  components: {\n    Button: {\n      backgroundColor: '#bb86fc',\n      color: '#ffffff',\n      hoverBackgroundColor: '#3700b3',\n    },\n  },\n});\n\nconst App = () =&gt; (\n  &lt;ThemeProvider theme={darkTheme}&gt;\n    &lt;h1&gt;Dark Mode Example&lt;/h1&gt;\n  &lt;/ThemeProvider&gt;\n);\n</code></pre>"},{"location":"animations/keyframes/#switching-between-light-and-dark-mode","title":"Switching Between Light and Dark Mode","text":"<p>You can dynamically switch between light and dark themes based on user preferences or a toggle.</p> <pre><code>import React, { useState } from 'react';\nimport { createTheme, ThemeProvider } from '@themakit/theme';\n\nconst lightTheme = createTheme({\n  palette: {\n    background: '#ffffff',\n    text: '#000000',\n    primary: '#4caf50',\n    accent: '#ff5722',\n  },\n});\n\nconst darkTheme = createTheme({\n  palette: {\n    background: '#121212',\n    text: '#ffffff',\n    primary: '#bb86fc',\n    accent: '#03dac6',\n  },\n});\n\nconst App = () =&gt; {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n\n  return (\n    &lt;ThemeProvider theme={isDarkMode ? darkTheme : lightTheme}&gt;\n      &lt;button onClick={() =&gt; setIsDarkMode(!isDarkMode)}&gt;\n        Toggle Dark Mode\n      &lt;/button&gt;\n      &lt;h1&gt;{isDarkMode ? 'Dark Mode' : 'Light Mode'}&lt;/h1&gt;\n    &lt;/ThemeProvider&gt;\n  );\n};\n</code></pre>"},{"location":"animations/keyframes/#using-system-preferences","title":"Using System Preferences","text":"<p>You can detect the user's system preference for dark mode using the <code>window.matchMedia</code> API.</p> <pre><code>import React, { useEffect, useState } from 'react';\nimport { createTheme, ThemeProvider } from '@themakit/theme';\n\nconst lightTheme = createTheme({\n  palette: {\n    background: '#ffffff',\n    text: '#000000',\n    primary: '#4caf50',\n    accent: '#ff5722',\n  },\n});\n\nconst darkTheme = createTheme({\n  palette: {\n    background: '#121212',\n    text: '#ffffff',\n    primary: '#bb86fc',\n    accent: '#03dac6',\n  },\n});\n\nconst App = () =&gt; {\n  const [isDarkMode, setIsDarkMode] = useState(\n    window.matchMedia('(prefers-color-scheme: dark)').matches\n  );\n\n  useEffect(() =&gt; {\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = () =&gt; setIsDarkMode(mediaQuery.matches);\n    mediaQuery.addEventListener('change', handleChange);\n    return () =&gt; mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n\n  return (\n    &lt;ThemeProvider theme={isDarkMode ? darkTheme : lightTheme}&gt;\n      &lt;h1&gt;{isDarkMode ? 'Dark Mode' : 'Light Mode'}&lt;/h1&gt;\n    &lt;/ThemeProvider&gt;\n  );\n};\n</code></pre>"},{"location":"animations/keyframes/#accessibility","title":"Accessibility","text":"<ul> <li>Ensure sufficient contrast between text and background colors in dark mode.</li> <li>Test your application in both light and dark modes to ensure a consistent user experience.</li> </ul>"},{"location":"animations/keyframes/#next-steps","title":"Next Steps","text":"<ul> <li>Learn more about Custom Themes to further customize your dark mode.</li> <li>Explore the Theme API for advanced theming options.</li> </ul>"},{"location":"animations/overview/","title":"Animations Overview","text":"<p>ThemaKit provides powerful animation utilities to enhance the user experience with smooth transitions and dynamic effects. These utilities include <code>Keyframes</code> for complex animations and <code>Transitions</code> for simple property changes.</p>"},{"location":"animations/overview/#key-features","title":"Key Features","text":"<ul> <li>Keyframes: Define custom animations using CSS keyframes.</li> <li>Transitions: Create smooth animations for property changes.</li> <li>Theming Support: Customize animations to match your application's theme.</li> <li>Accessibility: Ensure animations are user-friendly and respect motion preferences.</li> </ul>"},{"location":"animations/overview/#why-use-animations","title":"Why Use Animations?","text":"<p>Animations can improve the user experience by:</p> <ul> <li>Drawing attention to important elements.</li> <li>Providing visual feedback for user interactions.</li> <li>Making transitions between states feel smooth and natural.</li> </ul>"},{"location":"animations/overview/#getting-started","title":"Getting Started","text":""},{"location":"animations/overview/#keyframes","title":"Keyframes","text":"<p>Use <code>Keyframes</code> for creating complex animations like fades, slides, and rotations.</p> <pre><code>import { keyframes } from '@themakit/animations';\n\nconst fadeIn = keyframes`\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n`;\n</code></pre> <p>Learn more in the Keyframes section.</p>"},{"location":"animations/overview/#transitions","title":"Transitions","text":"<p>Use <code>Transitions</code> for animating property changes like color, size, or position.</p> <pre><code>import styled from 'styled-components';\n\nconst Button = styled.button`\n  background-color: #4caf50;\n  transition: background-color 0.3s ease;\n\n  &amp;:hover {\n    background-color: #388e3c;\n  }\n`;\n</code></pre> <p>Learn more in the Transitions section.</p>"},{"location":"animations/overview/#accessibility","title":"Accessibility","text":"<ul> <li>Respect user preferences for reduced motion by using the <code>prefers-reduced-motion</code> media query.</li> <li>Avoid excessive or distracting animations.</li> </ul> <pre><code>@media (prefers-reduced-motion: reduce) {\n  * {\n    animation: none;\n    transition: none;\n  }\n}\n</code></pre>"},{"location":"animations/overview/#next-steps","title":"Next Steps","text":"<ul> <li>Dive into Keyframes for advanced animations.</li> <li>Explore Transitions for simple and effective animations.</li> <li>Check out the Theming Guide to customize animations for your application.</li> </ul>"},{"location":"animations/transitions/","title":"Transitions","text":"<p>The <code>Transitions</code> utility in ThemaKit allows you to create smooth animations for property changes.</p>"},{"location":"animations/transitions/#import","title":"Import","text":"<pre><code>import { transition } from '@themakit/animations';\n</code></pre>"},{"location":"animations/transitions/#creating-transitions","title":"Creating Transitions","text":"<p>You can create custom transitions using the <code>transition</code> utility.</p> <pre><code>import styled from 'styled-components';\n\nconst Button = styled.button`\n  background-color: #4caf50;\n  color: white;\n  padding: 10px 20px;\n  border: none;\n  border-radius: 4px;\n  transition: background-color 0.3s ease;\n\n  &amp;:hover {\n    background-color: #388e3c;\n  }\n`;\n\nconst App = () =&gt; (\n  &lt;Button&gt;Hover Me&lt;/Button&gt;\n);\n</code></pre>"},{"location":"animations/transitions/#props","title":"Props","text":"Prop Type Default Description <code>property</code> <code>string</code> <code>'all'</code> The CSS property to apply the transition to. <code>duration</code> <code>string</code> <code>'0.3s'</code> The duration of the transition. <code>timing</code> <code>string</code> <code>'ease'</code> The timing function for the transition."},{"location":"animations/transitions/#accessibility","title":"Accessibility","text":"<ul> <li>Ensure transitions are smooth and do not distract users.</li> <li>Provide alternatives or disable transitions for users with motion sensitivity.</li> </ul>"},{"location":"animations/transitions/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Keyframes for more complex animations.</li> <li>Explore the Theming Guide to customize transitions.</li> </ul>"},{"location":"components/display/alert/","title":"Alert","text":"<p>The <code>Alert</code> component is used to display important messages to users. It supports different variants to convey the purpose of the message, such as success, error, warning, or informational alerts.</p>"},{"location":"components/display/alert/#import","title":"Import","text":"<pre><code>import { Alert } from '@themakit/alert';\n</code></pre>"},{"location":"components/display/alert/#usage","title":"Usage","text":""},{"location":"components/display/alert/#basic-alert","title":"Basic Alert","text":"<pre><code>&lt;Alert variant=\"info\"&gt;\n  This is an informational alert.\n&lt;/Alert&gt;\n</code></pre>"},{"location":"components/display/alert/#variants","title":"Variants","text":"<p>The <code>Alert</code> component supports multiple variants to indicate the type of message:</p> <pre><code>&lt;Alert variant=\"success\"&gt;\n  This is a success alert.\n&lt;/Alert&gt;\n\n&lt;Alert variant=\"error\"&gt;\n  This is an error alert.\n&lt;/Alert&gt;\n\n&lt;Alert variant=\"warning\"&gt;\n  This is a warning alert.\n&lt;/Alert&gt;\n\n&lt;Alert variant=\"info\"&gt;\n  This is an informational alert.\n&lt;/Alert&gt;\n</code></pre>"},{"location":"components/display/alert/#dismissible-alert","title":"Dismissible Alert","text":"<p>You can make alerts dismissible by adding a close button.</p> <pre><code>&lt;Alert variant=\"info\" dismissible onClose={() =&gt; console.log('Alert closed')}&gt;\n  This is a dismissible alert.\n&lt;/Alert&gt;\n</code></pre>"},{"location":"components/display/alert/#alert-with-custom-icon","title":"Alert with Custom Icon","text":"<p>You can customize the icon displayed in the alert.</p> <pre><code>&lt;Alert variant=\"info\" icon={&lt;CustomIcon /&gt;}&gt;\n  This is an alert with a custom icon.\n&lt;/Alert&gt;\n</code></pre>"},{"location":"components/display/alert/#props","title":"Props","text":"Prop Type Default Description <code>variant</code> <code>'success' | 'error' | 'warning' | 'info'</code> <code>'info'</code> The type of alert to display. <code>dismissible</code> <code>boolean</code> <code>false</code> Whether the alert can be dismissed. <code>onClose</code> <code>() =&gt; void</code> <code>null</code> Callback function triggered when the alert is dismissed. <code>icon</code> <code>ReactNode</code> <code>null</code> Custom icon to display in the alert."},{"location":"components/display/alert/#accessibility","title":"Accessibility","text":"<ul> <li>Alerts use <code>role=\"alert\"</code> to ensure they are announced by screen readers.</li> <li>Dismissible alerts include accessible labels for the close button.</li> </ul>"},{"location":"components/display/alert/#theming","title":"Theming","text":"<p>You can customize the appearance of the <code>Alert</code> component using the theme:</p> <pre><code>const theme = {\n  components: {\n    Alert: {\n      success: {\n        backgroundColor: '#d4edda',\n        color: '#155724',\n      },\n      error: {\n        backgroundColor: '#f8d7da',\n        color: '#721c24',\n      },\n      warning: {\n        backgroundColor: '#fff3cd',\n        color: '#856404',\n      },\n      info: {\n        backgroundColor: '#d1ecf1',\n        color: '#0c5460',\n      },\n    },\n  },\n};\n</code></pre> <p>For more information on theming, see the Theming Guide.</p>"},{"location":"components/display/card/","title":"Card","text":"<p>The <code>Card</code> component is a flexible and extensible container for displaying content in a structured layout.</p>"},{"location":"components/display/card/#import","title":"Import","text":"<pre><code>import { Card } from '@themakit/card';\n</code></pre>"},{"location":"components/display/card/#usage","title":"Usage","text":""},{"location":"components/display/card/#basic-card","title":"Basic Card","text":"<pre><code>&lt;Card&gt;\n  &lt;h3&gt;Card Title&lt;/h3&gt;\n  &lt;p&gt;This is some content inside the card.&lt;/p&gt;\n&lt;/Card&gt;\n</code></pre>"},{"location":"components/display/card/#card-with-header-and-footer","title":"Card with Header and Footer","text":"<p>You can add a header and footer to the card for better structure.</p> <pre><code>&lt;Card&gt;\n  &lt;Card.Header&gt;\n    &lt;h3&gt;Card Header&lt;/h3&gt;\n  &lt;/Card.Header&gt;\n  &lt;Card.Body&gt;\n    &lt;p&gt;This is the main content of the card.&lt;/p&gt;\n  &lt;/Card.Body&gt;\n  &lt;Card.Footer&gt;\n    &lt;button&gt;Action&lt;/button&gt;\n  &lt;/Card.Footer&gt;\n&lt;/Card&gt;\n</code></pre>"},{"location":"components/display/card/#card-with-image","title":"Card with Image","text":"<p>You can include an image in the card.</p> <pre><code>&lt;Card&gt;\n  &lt;img src=\"https://via.placeholder.com/150\" alt=\"Card Image\" /&gt;\n  &lt;Card.Body&gt;\n    &lt;h3&gt;Card Title&lt;/h3&gt;\n    &lt;p&gt;This is some content inside the card.&lt;/p&gt;\n  &lt;/Card.Body&gt;\n&lt;/Card&gt;\n</code></pre>"},{"location":"components/display/card/#props","title":"Props","text":"Prop Type Default Description <code>elevation</code> <code>number</code> <code>1</code> The elevation level of the card (e.g., shadow depth). <code>bordered</code> <code>boolean</code> <code>false</code> Whether the card has a border."},{"location":"components/display/card/#accessibility","title":"Accessibility","text":"<ul> <li>Cards are accessible by default and can be used as containers for any content.</li> <li>Ensure the content inside the card is meaningful and accessible.</li> </ul>"},{"location":"components/display/card/#theming","title":"Theming","text":"<p>You can customize the appearance of the <code>Card</code> component using the theme:</p> <pre><code>const theme = {\n  components: {\n    Card: {\n      backgroundColor: '#fff',\n      color: '#000',\n      borderRadius: '8px',\n      boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',\n    },\n  },\n};\n</code></pre> <p>For more information on theming, see the Theming Guide.</p>"},{"location":"components/display/modal/","title":"Modal","text":"<p>The <code>Modal</code> component is used to display content in a dialog box that appears on top of the main content.</p>"},{"location":"components/display/modal/#import","title":"Import","text":"<pre><code>import { Modal } from '@themakit/modal';\n</code></pre>"},{"location":"components/display/modal/#usage","title":"Usage","text":""},{"location":"components/display/modal/#basic-modal","title":"Basic Modal","text":"<pre><code>&lt;Modal isOpen={true} onClose={() =&gt; console.log('Modal closed')}&gt;\n  &lt;h1&gt;Modal Title&lt;/h1&gt;\n  &lt;p&gt;This is the modal content.&lt;/p&gt;\n&lt;/Modal&gt;\n</code></pre>"},{"location":"components/display/modal/#modal-with-header-and-footer","title":"Modal with Header and Footer","text":"<p>You can include a header and footer in the modal for better structure.</p> <pre><code>&lt;Modal isOpen={true} onClose={() =&gt; console.log('Modal closed')}&gt;\n  &lt;Modal.Header&gt;\n    &lt;h1&gt;Modal Title&lt;/h1&gt;\n  &lt;/Modal.Header&gt;\n  &lt;Modal.Body&gt;\n    &lt;p&gt;This is the modal content.&lt;/p&gt;\n  &lt;/Modal.Body&gt;\n  &lt;Modal.Footer&gt;\n    &lt;button onClick={() =&gt; console.log('Cancel clicked')}&gt;Cancel&lt;/button&gt;\n    &lt;button onClick={() =&gt; console.log('Confirm clicked')}&gt;Confirm&lt;/button&gt;\n  &lt;/Modal.Footer&gt;\n&lt;/Modal&gt;\n</code></pre>"},{"location":"components/display/modal/#centered-modal","title":"Centered Modal","text":"<p>You can center the modal on the screen using the <code>centered</code> prop.</p> <pre><code>&lt;Modal isOpen={true} centered onClose={() =&gt; console.log('Modal closed')}&gt;\n  &lt;h1&gt;Centered Modal&lt;/h1&gt;\n  &lt;p&gt;This modal is centered on the screen.&lt;/p&gt;\n&lt;/Modal&gt;\n</code></pre>"},{"location":"components/display/modal/#props","title":"Props","text":"Prop Type Default Description <code>isOpen</code> <code>boolean</code> <code>false</code> Whether the modal is open. <code>onClose</code> <code>() =&gt; void</code> <code>null</code> Callback function triggered when the modal is closed. <code>centered</code> <code>boolean</code> <code>false</code> Whether the modal is centered on the screen."},{"location":"components/display/modal/#accessibility","title":"Accessibility","text":"<ul> <li>Modals use <code>role=\"dialog\"</code> and <code>aria-labelledby</code>/<code>aria-describedby</code> for accessibility.</li> <li>Ensure the modal content is meaningful and accessible to all users.</li> </ul>"},{"location":"components/display/modal/#theming","title":"Theming","text":"<p>You can customize the appearance of the <code>Modal</code> component using the theme:</p> <pre><code>const theme = {\n  components: {\n    Modal: {\n      backgroundColor: '#fff',\n      color: '#000',\n      borderRadius: '8px',\n      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n    },\n  },\n};\n</code></pre> <p>For more information on theming, see the Theming Guide.</p>"},{"location":"components/display/toast/","title":"Toast","text":"<p>The <code>Toast</code> component is used to display brief, auto-expiring messages to notify users of specific actions or events.</p>"},{"location":"components/display/toast/#import","title":"Import","text":"<pre><code>import { Toast } from '@themakit/toast';\n</code></pre>"},{"location":"components/display/toast/#usage","title":"Usage","text":""},{"location":"components/display/toast/#basic-toast","title":"Basic Toast","text":"<pre><code>&lt;Toast message=\"This is a toast notification\" /&gt;\n</code></pre>"},{"location":"components/display/toast/#variants","title":"Variants","text":"<p>The <code>Toast</code> component supports multiple variants to indicate the type of message:</p> <pre><code>&lt;Toast variant=\"success\" message=\"Operation successful!\" /&gt;\n&lt;Toast variant=\"error\" message=\"An error occurred!\" /&gt;\n&lt;Toast variant=\"warning\" message=\"Warning: Check your input!\" /&gt;\n&lt;Toast variant=\"info\" message=\"This is an informational toast.\" /&gt;\n</code></pre>"},{"location":"components/display/toast/#toast-with-custom-duration","title":"Toast with Custom Duration","text":"<p>You can specify how long the toast should remain visible using the <code>duration</code> prop (in milliseconds).</p> <pre><code>&lt;Toast message=\"This toast will disappear in 5 seconds\" duration={5000} /&gt;\n</code></pre>"},{"location":"components/display/toast/#toast-with-action","title":"Toast with Action","text":"<p>You can include an action button in the toast.</p> <pre><code>&lt;Toast\n  message=\"File uploaded successfully\"\n  action={{ label: 'Undo', onClick: () =&gt; console.log('Undo clicked') }}\n/&gt;\n</code></pre>"},{"location":"components/display/toast/#props","title":"Props","text":"Prop Type Default Description <code>message</code> <code>string</code> <code>null</code> The message to display in the toast. <code>variant</code> <code>'success' | 'error' | 'warning' | 'info'</code> <code>'info'</code> The type of toast to display. <code>duration</code> <code>number</code> <code>3000</code> Duration in milliseconds before the toast disappears. <code>action</code> <code>{ label: string; onClick: () =&gt; void }</code> <code>null</code> Action button with a label and click handler."},{"location":"components/display/toast/#accessibility","title":"Accessibility","text":"<ul> <li>Toasts use <code>role=\"status\"</code> to ensure they are announced by screen readers.</li> <li>Ensure the <code>message</code> prop provides meaningful information for all users.</li> </ul>"},{"location":"components/display/toast/#theming","title":"Theming","text":"<p>You can customize the appearance of the <code>Toast</code> component using the theme:</p> <pre><code>const theme = {\n  components: {\n    Toast: {\n      success: {\n        backgroundColor: '#d4edda',\n        color: '#155724',\n      },\n      error: {\n        backgroundColor: '#f8d7da',\n        color: '#721c24',\n      },\n      warning: {\n        backgroundColor: '#fff3cd',\n        color: '#856404',\n      },\n      info: {\n        backgroundColor: '#d1ecf1',\n        color: '#0c5460',\n      },\n    },\n  },\n};\n</code></pre> <p>For more information on theming, see the Theming Guide.</p>"},{"location":"components/inputs/button/","title":"Button","text":"<p>The Button component is used to trigger an action or event, such as submitting a form, opening a dialog, canceling an action, or performing a delete operation.</p>"},{"location":"components/inputs/button/#import","title":"Import","text":"<pre><code>import { Button } from '@themakit/button';\n</code></pre>"},{"location":"components/inputs/button/#usage","title":"Usage","text":"<pre><code>&lt;Button variant=\"primary\"&gt;Click Me&lt;/Button&gt;\n</code></pre>"},{"location":"components/inputs/button/#examples","title":"Examples","text":""},{"location":"components/inputs/button/#button-variants","title":"Button Variants","text":"<p>ThemaKit buttons come in several variants to indicate different levels of emphasis.</p> <pre><code>&lt;Button variant=\"primary\"&gt;Primary&lt;/Button&gt;\n&lt;Button variant=\"secondary\"&gt;Secondary&lt;/Button&gt;\n&lt;Button variant=\"outline\"&gt;Outline&lt;/Button&gt;\n&lt;Button variant=\"text\"&gt;Text&lt;/Button&gt;\n&lt;Button variant=\"destructive\"&gt;Delete&lt;/Button&gt;\n</code></pre>"},{"location":"components/inputs/button/#button-sizes","title":"Button Sizes","text":"<p>Buttons are available in different sizes to fit your design needs.</p> <pre><code>&lt;Button size=\"sm\"&gt;Small&lt;/Button&gt;\n&lt;Button size=\"md\"&gt;Medium&lt;/Button&gt;\n&lt;Button size=\"lg\"&gt;Large&lt;/Button&gt;\n</code></pre>"},{"location":"components/inputs/button/#button-states","title":"Button States","text":"<pre><code>&lt;Button&gt;Default&lt;/Button&gt;\n&lt;Button disabled&gt;Disabled&lt;/Button&gt;\n&lt;Button loading&gt;Loading&lt;/Button&gt;\n</code></pre>"},{"location":"components/inputs/button/#with-icon","title":"With Icon","text":"<pre><code>&lt;Button startIcon={&lt;IconName /&gt;}&gt;Start Icon&lt;/Button&gt;\n&lt;Button endIcon={&lt;IconName /&gt;}&gt;End Icon&lt;/Button&gt;\n&lt;Button icon={&lt;IconName /&gt;} aria-label=\"Icon only button\" /&gt;\n</code></pre>"},{"location":"components/inputs/button/#full-width","title":"Full Width","text":"<pre><code>&lt;Button fullWidth&gt;Full Width Button&lt;/Button&gt;\n</code></pre>"},{"location":"components/inputs/button/#props","title":"Props","text":"Prop Type Default Description <code>variant</code> <code>'primary' | 'secondary' | 'outline' | 'text' | 'destructive'</code> <code>'primary'</code> The variant of the button <code>size</code> <code>'sm' | 'md' | 'lg'</code> <code>'md'</code> The size of the button <code>disabled</code> <code>boolean</code> <code>false</code> Whether the button is disabled <code>loading</code> <code>boolean</code> <code>false</code> Whether the button is in a loading state <code>fullWidth</code> <code>boolean</code> <code>false</code> If true, the button will take up the full width of its container <code>startIcon</code> <code>ReactNode</code> Icon to display at the start of the button <code>endIcon</code> <code>ReactNode</code> Icon to display at the end of the button <code>icon</code> <code>ReactNode</code> Icon to display (for icon-only buttons) <code>type</code> <code>'button' | 'submit' | 'reset'</code> <code>'button'</code> The HTML button type <code>onClick</code> <code>(event: React.MouseEvent&lt;HTMLButtonElement&gt;) =&gt; void</code> Function called when the button is clicked <code>ref</code> <code>React.Ref&lt;HTMLButtonElement&gt;</code> Ref forwarded to the button element <p>The Button component also accepts all props that can be passed to a standard HTML button element.</p>"},{"location":"components/inputs/button/#accessibility","title":"Accessibility","text":"<ul> <li>When using the <code>icon</code> prop without text, always provide an <code>aria-label</code> to ensure the button is accessible to screen reader users.</li> <li>The Button component handles keyboard focus and uses appropriate ARIA attributes based on its state.</li> <li>When in a <code>loading</code> state, the button will be marked with <code>aria-busy=\"true\"</code>.</li> </ul>"},{"location":"components/inputs/button/#theming","title":"Theming","text":"<p>You can customize the appearance of the Button component using the theme:</p> <pre><code>// Example theme customization\nconst theme = {\n    components: {\n        Button: {\n            variants: {\n                primary: {\n                    backgroundColor: '#0066ff',\n                    color: 'white',\n                    // ... other styles\n                },\n            },\n            sizes: {\n                sm: {\n                    padding: '0.25rem 0.5rem',\n                    fontSize: '0.875rem',\n                },\n                // ... other sizes\n            },\n        },\n    },\n};\n</code></pre> <p>For more information on theming, see the Theming Guide.</p>"},{"location":"components/inputs/checkbox/","title":"Checkbox","text":"<p>The <code>Checkbox</code> component is used to allow users to select one or more options from a set.</p>"},{"location":"components/inputs/checkbox/#import","title":"Import","text":"<pre><code>import { Checkbox } from '@themakit/checkbox';\n</code></pre>"},{"location":"components/inputs/checkbox/#usage","title":"Usage","text":""},{"location":"components/inputs/checkbox/#basic-checkbox","title":"Basic Checkbox","text":"<pre><code>&lt;Checkbox label=\"Accept Terms and Conditions\" /&gt;\n</code></pre>"},{"location":"components/inputs/checkbox/#controlled-checkbox","title":"Controlled Checkbox","text":"<p>You can control the state of the checkbox using the <code>checked</code> and <code>onChange</code> props.</p> <pre><code>const [checked, setChecked] = React.useState(false);\n\n&lt;Checkbox\n  label=\"Subscribe to newsletter\"\n  checked={checked}\n  onChange={(e) =&gt; setChecked(e.target.checked)}\n/&gt;;\n</code></pre>"},{"location":"components/inputs/checkbox/#disabled-checkbox","title":"Disabled Checkbox","text":"<p>You can disable the checkbox using the <code>disabled</code> prop.</p> <pre><code>&lt;Checkbox label=\"Disabled Checkbox\" disabled /&gt;\n</code></pre>"},{"location":"components/inputs/checkbox/#props","title":"Props","text":"Prop Type Default Description <code>label</code> <code>string</code> <code>null</code> The label displayed next to the checkbox. <code>checked</code> <code>boolean</code> <code>false</code> Whether the checkbox is checked (controlled). <code>defaultChecked</code> <code>boolean</code> <code>false</code> Whether the checkbox is initially checked. <code>disabled</code> <code>boolean</code> <code>false</code> Whether the checkbox is disabled. <code>onChange</code> <code>(event: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; void</code> <code>null</code> Callback triggered when the checkbox state changes."},{"location":"components/inputs/checkbox/#accessibility","title":"Accessibility","text":"<ul> <li>The <code>Checkbox</code> component uses native <code>&lt;input type=\"checkbox\"&gt;</code> for accessibility.</li> <li>Ensure the <code>label</code> prop provides meaningful context for screen readers.</li> </ul>"},{"location":"components/inputs/checkbox/#theming","title":"Theming","text":"<p>You can customize the appearance of the <code>Checkbox</code> component using the theme:</p> <pre><code>const theme = {\n  components: {\n    Checkbox: {\n      color: '#4caf50',\n      disabledColor: '#9e9e9e',\n    },\n  },\n};\n</code></pre> <p>For more information on theming, see the Theming Guide.</p>"},{"location":"components/inputs/select/","title":"Grid","text":"<p>The <code>Grid</code> component is used to create responsive layouts with rows and columns.</p>"},{"location":"components/inputs/select/#import","title":"Import","text":"<pre><code>import { Grid, GridItem } from '@themakit/grid';\n</code></pre>"},{"location":"components/inputs/select/#usage","title":"Usage","text":""},{"location":"components/inputs/select/#basic-grid","title":"Basic Grid","text":"<pre><code>&lt;Grid&gt;\n  &lt;GridItem span={6}&gt;Column 1&lt;/GridItem&gt;\n  &lt;GridItem span={6}&gt;Column 2&lt;/GridItem&gt;\n&lt;/Grid&gt;\n</code></pre>"},{"location":"components/inputs/select/#responsive-grid","title":"Responsive Grid","text":"<p>You can define different column spans for different screen sizes.</p> <pre><code>&lt;Grid&gt;\n  &lt;GridItem span={12} md={6} lg={4}&gt;\n    Column 1\n  &lt;/GridItem&gt;\n  &lt;GridItem span={12} md={6} lg={4}&gt;\n    Column 2\n  &lt;/GridItem&gt;\n  &lt;GridItem span={12} md={6} lg={4}&gt;\n    Column 3\n  &lt;/GridItem&gt;\n&lt;/Grid&gt;\n</code></pre>"},{"location":"components/inputs/select/#nested-grid","title":"Nested Grid","text":"<p>You can nest grids inside grid items.</p> <pre><code>&lt;Grid&gt;\n  &lt;GridItem span={12}&gt;\n    &lt;Grid&gt;\n      &lt;GridItem span={6}&gt;Nested Column 1&lt;/GridItem&gt;\n      &lt;GridItem span={6}&gt;Nested Column 2&lt;/GridItem&gt;\n    &lt;/Grid&gt;\n  &lt;/GridItem&gt;\n&lt;/Grid&gt;\n</code></pre>"},{"location":"components/inputs/select/#props","title":"Props","text":""},{"location":"components/inputs/select/#grid_1","title":"<code>Grid</code>","text":"Prop Type Default Description <code>gap</code> <code>number | string</code> <code>0</code> The gap between grid items."},{"location":"components/inputs/select/#griditem","title":"<code>GridItem</code>","text":"Prop Type Default Description <code>span</code> <code>number</code> <code>12</code> The number of columns the item spans. <code>md</code> <code>number</code> <code>null</code> The span for medium-sized screens. <code>lg</code> <code>number</code> <code>null</code> The span for large-sized screens."},{"location":"components/inputs/select/#accessibility","title":"Accessibility","text":"<ul> <li>The <code>Grid</code> component is a layout tool and does not have specific accessibility features.</li> <li>Ensure the content inside grid items is accessible.</li> </ul>"},{"location":"components/inputs/select/#theming","title":"Theming","text":"<p>You can customize the appearance of the <code>Grid</code> component using the theme:</p> <pre><code>const theme = {\n  components: {\n    Grid: {\n      gap: '16px',\n    },\n    GridItem: {\n      padding: '8px',\n    },\n  },\n};\n</code></pre> <p>For more information on theming, see the Theming Guide.</p>"},{"location":"components/inputs/textfield/","title":"TextField","text":"<p>The <code>TextField</code> component is used to capture user input in the form of text.</p>"},{"location":"components/inputs/textfield/#import","title":"Import","text":"<pre><code>import { TextField } from '@themakit/textfield';\n</code></pre>"},{"location":"components/inputs/textfield/#usage","title":"Usage","text":""},{"location":"components/inputs/textfield/#basic-textfield","title":"Basic TextField","text":"<pre><code>&lt;TextField placeholder=\"Enter your name\" /&gt;\n</code></pre>"},{"location":"components/inputs/textfield/#controlled-textfield","title":"Controlled TextField","text":"<p>You can control the value of the <code>TextField</code> using the <code>value</code> and <code>onChange</code> props.</p> <pre><code>const [value, setValue] = React.useState('');\n\n&lt;TextField\n  value={value}\n  onChange={(e) =&gt; setValue(e.target.value)}\n  placeholder=\"Enter your email\"\n/&gt;;\n</code></pre>"},{"location":"components/inputs/textfield/#textfield-with-label","title":"TextField with Label","text":"<p>You can add a label to the <code>TextField</code> for better context.</p> <pre><code>&lt;TextField label=\"Name\" placeholder=\"Enter your name\" /&gt;\n</code></pre>"},{"location":"components/inputs/textfield/#disabled-textfield","title":"Disabled TextField","text":"<p>You can disable the <code>TextField</code> using the <code>disabled</code> prop.</p> <pre><code>&lt;TextField label=\"Disabled\" placeholder=\"Cannot type here\" disabled /&gt;\n</code></pre>"},{"location":"components/inputs/textfield/#props","title":"Props","text":"Prop Type Default Description <code>value</code> <code>string</code> <code>''</code> The current value of the text field. <code>onChange</code> <code>(event: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; void</code> <code>null</code> Callback triggered when the value changes. <code>placeholder</code> <code>string</code> <code>''</code> Placeholder text displayed inside the text field. <code>label</code> <code>string</code> <code>null</code> Label displayed above the text field. <code>disabled</code> <code>boolean</code> <code>false</code> Whether the text field is disabled."},{"location":"components/inputs/textfield/#accessibility","title":"Accessibility","text":"<ul> <li>The <code>TextField</code> component uses native <code>&lt;input&gt;</code> elements for accessibility.</li> <li>Ensure the <code>label</code> prop provides meaningful context for screen readers.</li> </ul>"},{"location":"components/inputs/textfield/#theming","title":"Theming","text":"<p>You can customize the appearance of the <code>TextField</code> component using the theme:</p> <pre><code>const theme = {\n  components: {\n    TextField: {\n      backgroundColor: '#fff',\n      borderColor: '#ccc',\n      focusBorderColor: '#4caf50',\n    },\n  },\n};\n</code></pre> <p>For more information on theming, see the Theming Guide.</p>"},{"location":"components/layout/container/","title":"TextField","text":"<p>The <code>TextField</code> component is used to capture user input in the form of text.</p>"},{"location":"components/layout/container/#import","title":"Import","text":"<pre><code>import { TextField } from '@themakit/textfield';\n</code></pre>"},{"location":"components/layout/container/#usage","title":"Usage","text":""},{"location":"components/layout/container/#basic-textfield","title":"Basic TextField","text":"<pre><code>&lt;TextField placeholder=\"Enter your name\" /&gt;\n</code></pre>"},{"location":"components/layout/container/#controlled-textfield","title":"Controlled TextField","text":"<p>You can control the value of the <code>TextField</code> using the <code>value</code> and <code>onChange</code> props.</p> <pre><code>const [value, setValue] = React.useState('');\n\n&lt;TextField\n  value={value}\n  onChange={(e) =&gt; setValue(e.target.value)}\n  placeholder=\"Enter your email\"\n/&gt;;\n</code></pre>"},{"location":"components/layout/container/#textfield-with-label","title":"TextField with Label","text":"<p>You can add a label to the <code>TextField</code> for better context.</p> <pre><code>&lt;TextField label=\"Name\" placeholder=\"Enter your name\" /&gt;\n</code></pre>"},{"location":"components/layout/container/#disabled-textfield","title":"Disabled TextField","text":"<p>You can disable the <code>TextField</code> using the <code>disabled</code> prop.</p> <pre><code>&lt;TextField label=\"Disabled\" placeholder=\"Cannot type here\" disabled /&gt;\n</code></pre>"},{"location":"components/layout/container/#props","title":"Props","text":"Prop Type Default Description <code>value</code> <code>string</code> <code>''</code> The current value of the text field. <code>onChange</code> <code>(event: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; void</code> <code>null</code> Callback triggered when the value changes. <code>placeholder</code> <code>string</code> <code>''</code> Placeholder text displayed inside the text field. <code>label</code> <code>string</code> <code>null</code> Label displayed above the text field. <code>disabled</code> <code>boolean</code> <code>false</code> Whether the text field is disabled."},{"location":"components/layout/container/#accessibility","title":"Accessibility","text":"<ul> <li>The <code>TextField</code> component uses native <code>&lt;input&gt;</code> elements for accessibility.</li> <li>Ensure the <code>label</code> prop provides meaningful context for screen readers.</li> </ul>"},{"location":"components/layout/container/#theming","title":"Theming","text":"<p>You can customize the appearance of the <code>TextField</code> component using the theme:</p> <pre><code>const theme = {\n  components: {\n    TextField: {\n      backgroundColor: '#fff',\n      borderColor: '#ccc',\n      focusBorderColor: '#4caf50',\n    },\n  },\n};\n</code></pre> <p>For more information on theming, see the Theming Guide.</p>"},{"location":"components/layout/flex/","title":"Flex","text":"<p>The <code>Flex</code> component is used to create flexible layouts using CSS flexbox.</p>"},{"location":"components/layout/flex/#import","title":"Import","text":"<pre><code>import { Flex } from '@themakit/flex';\n</code></pre>"},{"location":"components/layout/flex/#usage","title":"Usage","text":""},{"location":"components/layout/flex/#basic-flex","title":"Basic Flex","text":"<pre><code>&lt;Flex&gt;\n  &lt;div&gt;Item 1&lt;/div&gt;\n  &lt;div&gt;Item 2&lt;/div&gt;\n  &lt;div&gt;Item 3&lt;/div&gt;\n&lt;/Flex&gt;\n</code></pre>"},{"location":"components/layout/flex/#align-items","title":"Align Items","text":"<p>You can align items along the cross axis using the <code>align</code> prop.</p> <pre><code>&lt;Flex align=\"center\"&gt;\n  &lt;div&gt;Item 1&lt;/div&gt;\n  &lt;div&gt;Item 2&lt;/div&gt;\n  &lt;div&gt;Item 3&lt;/div&gt;\n&lt;/Flex&gt;\n</code></pre>"},{"location":"components/layout/flex/#justify-content","title":"Justify Content","text":"<p>You can distribute items along the main axis using the <code>justify</code> prop.</p> <pre><code>&lt;Flex justify=\"space-between\"&gt;\n  &lt;div&gt;Item 1&lt;/div&gt;\n  &lt;div&gt;Item 2&lt;/div&gt;\n  &lt;div&gt;Item 3&lt;/div&gt;\n&lt;/Flex&gt;\n</code></pre>"},{"location":"components/layout/flex/#direction","title":"Direction","text":"<p>You can change the direction of the flex items using the <code>direction</code> prop.</p> <pre><code>&lt;Flex direction=\"column\"&gt;\n  &lt;div&gt;Item 1&lt;/div&gt;\n  &lt;div&gt;Item 2&lt;/div&gt;\n  &lt;div&gt;Item 3&lt;/div&gt;\n&lt;/Flex&gt;\n</code></pre>"},{"location":"components/layout/flex/#props","title":"Props","text":"Prop Type Default Description <code>align</code> <code>'flex-start' | 'center' | 'flex-end' | 'stretch'</code> <code>'stretch'</code> Alignment of items along the cross axis. <code>justify</code> <code>'flex-start' | 'center' | 'flex-end' | 'space-between' | 'space-around'</code> <code>'flex-start'</code> Distribution of items along the main axis. <code>direction</code> <code>'row' | 'column'</code> <code>'row'</code> Direction of the flex items. <code>gap</code> <code>string | number</code> <code>0</code> Gap between flex items."},{"location":"components/layout/flex/#accessibility","title":"Accessibility","text":"<ul> <li>The <code>Flex</code> component is a layout tool and does not have specific accessibility features.</li> <li>Ensure the content inside the flex container is accessible.</li> </ul>"},{"location":"components/layout/flex/#theming","title":"Theming","text":"<p>You can customize the appearance of the <code>Flex</code> component using the theme:</p> <pre><code>const theme = {\n  components: {\n    Flex: {\n      gap: '16px',\n    },\n  },\n};\n</code></pre> <p>For more information on theming, see the Theming Guide.</p>"},{"location":"components/layout/grid/","title":"Grid","text":"<p>The <code>Grid</code> component is used to create responsive layouts with rows and columns.</p>"},{"location":"components/layout/grid/#import","title":"Import","text":"<pre><code>import { Grid, GridItem } from '@themakit/grid';\n</code></pre>"},{"location":"components/layout/grid/#usage","title":"Usage","text":""},{"location":"components/layout/grid/#basic-grid","title":"Basic Grid","text":"<pre><code>&lt;Grid&gt;\n  &lt;GridItem span={6}&gt;Column 1&lt;/GridItem&gt;\n  &lt;GridItem span={6}&gt;Column 2&lt;/GridItem&gt;\n&lt;/Grid&gt;\n</code></pre>"},{"location":"components/layout/grid/#responsive-grid","title":"Responsive Grid","text":"<p>You can define different column spans for different screen sizes.</p> <pre><code>&lt;Grid&gt;\n  &lt;GridItem span={12} md={6} lg={4}&gt;\n    Column 1\n  &lt;/GridItem&gt;\n  &lt;GridItem span={12} md={6} lg={4}&gt;\n    Column 2\n  &lt;/GridItem&gt;\n  &lt;GridItem span={12} md={6} lg={4}&gt;\n    Column 3\n  &lt;/GridItem&gt;\n&lt;/Grid&gt;\n</code></pre>"},{"location":"components/layout/grid/#nested-grid","title":"Nested Grid","text":"<p>You can nest grids inside grid items.</p> <pre><code>&lt;Grid&gt;\n  &lt;GridItem span={12}&gt;\n    &lt;Grid&gt;\n      &lt;GridItem span={6}&gt;Nested Column 1&lt;/GridItem&gt;\n      &lt;GridItem span={6}&gt;Nested Column 2&lt;/GridItem&gt;\n    &lt;/Grid&gt;\n  &lt;/GridItem&gt;\n&lt;/Grid&gt;\n</code></pre>"},{"location":"components/layout/grid/#props","title":"Props","text":""},{"location":"components/layout/grid/#grid_1","title":"<code>Grid</code>","text":"Prop Type Default Description <code>gap</code> <code>number | string</code> <code>0</code> The gap between grid items."},{"location":"components/layout/grid/#griditem","title":"<code>GridItem</code>","text":"Prop Type Default Description <code>span</code> <code>number</code> <code>12</code> The number of columns the item spans. <code>md</code> <code>number</code> <code>null</code> The span for medium-sized screens. <code>lg</code> <code>number</code> <code>null</code> The span for large-sized screens."},{"location":"components/layout/grid/#accessibility","title":"Accessibility","text":"<ul> <li>The <code>Grid</code> component is a layout tool and does not have specific accessibility features.</li> <li>Ensure the content inside grid items is accessible.</li> </ul>"},{"location":"components/layout/grid/#theming","title":"Theming","text":"<p>You can customize the appearance of the <code>Grid</code> component using the theme:</p> <pre><code>const theme = {\n  components: {\n    Grid: {\n      gap: '16px',\n    },\n    GridItem: {\n      padding: '8px',\n    },\n  },\n};\n</code></pre> <p>For more information on theming, see the Theming Guide.</p>"},{"location":"components/layout/stack/","title":"Stack","text":"<p>The <code>Stack</code> component is used to arrange items in a vertical or horizontal stack with consistent spacing.</p>"},{"location":"components/layout/stack/#import","title":"Import","text":"<pre><code>import { Stack } from '@themakit/stack';\n</code></pre>"},{"location":"components/layout/stack/#usage","title":"Usage","text":""},{"location":"components/layout/stack/#vertical-stack","title":"Vertical Stack","text":"<pre><code>&lt;Stack spacing=\"16px\"&gt;\n  &lt;div&gt;Item 1&lt;/div&gt;\n  &lt;div&gt;Item 2&lt;/div&gt;\n  &lt;div&gt;Item 3&lt;/div&gt;\n&lt;/Stack&gt;\n</code></pre>"},{"location":"components/layout/stack/#horizontal-stack","title":"Horizontal Stack","text":"<p>You can arrange items horizontally using the <code>direction</code> prop.</p> <pre><code>&lt;Stack direction=\"row\" spacing=\"16px\"&gt;\n  &lt;div&gt;Item 1&lt;/div&gt;\n  &lt;div&gt;Item 2&lt;/div&gt;\n  &lt;div&gt;Item 3&lt;/div&gt;\n&lt;/Stack&gt;\n</code></pre>"},{"location":"components/layout/stack/#align-items","title":"Align Items","text":"<p>You can align items along the cross axis using the <code>align</code> prop.</p> <pre><code>&lt;Stack direction=\"row\" align=\"center\" spacing=\"16px\"&gt;\n  &lt;div&gt;Item 1&lt;/div&gt;\n  &lt;div&gt;Item 2&lt;/div&gt;\n  &lt;div&gt;Item 3&lt;/div&gt;\n&lt;/Stack&gt;\n</code></pre>"},{"location":"components/layout/stack/#props","title":"Props","text":"Prop Type Default Description <code>direction</code> <code>'row' | 'column'</code> <code>'column'</code> Direction of the stack (vertical or horizontal). <code>spacing</code> <code>string | number</code> <code>0</code> Spacing between items in the stack. <code>align</code> <code>'flex-start' | 'center' | 'flex-end' | 'stretch'</code> <code>'stretch'</code> Alignment of items along the cross axis."},{"location":"components/layout/stack/#accessibility","title":"Accessibility","text":"<ul> <li>The <code>Stack</code> component is a layout tool and does not have specific accessibility features.</li> <li>Ensure the content inside the stack is accessible.</li> </ul>"},{"location":"components/layout/stack/#theming","title":"Theming","text":"<p>You can customize the appearance of the <code>Stack</code> component using the theme:</p> <pre><code>const theme = {\n  components: {\n    Stack: {\n      spacing: '16px',\n    },\n  },\n};\n</code></pre> <p>For more information on theming, see the Theming Guide.</p>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#package-structure","title":"Package Structure","text":"<p>ThemaKit is distributed as a collection of packages under the <code>@themakit</code> scope. This modular approach allows you to install only the components you need.</p>"},{"location":"getting-started/installation/#core-packages","title":"Core Packages","text":"<pre><code># Install the core package (required)\nnpm install @themakit/core\n\n# Install the theme package (recommended)\nnpm install @themakit/theme\n</code></pre>"},{"location":"getting-started/installation/#component-packages","title":"Component Packages","text":"<p>Install only the component packages you need: <pre><code># Layout components\nnpm install @themakit/layout\n\n# Input components\nnpm install @themakit/button @themakit/input @themakit/select @themakit/checkbox\n\n# Display components\nnpm install @themakit/card @themakit/modal @themakit/alert @themakit/toast\n</code></pre></p>"},{"location":"getting-started/installation/#all-in-one-package","title":"All-in-one Package","text":"<p>If you prefer to install everything at once: <pre><code>npm install @themakit/core @themakit/theme @themakit/components\n</code></pre></p>"},{"location":"getting-started/installation/#peer-dependencies","title":"Peer Dependencies","text":"<p>ThemaKit requires the following peer dependencies: <pre><code>npm install react react-dom\n</code></pre> ThemaKit supports React 18 and above.</p>"},{"location":"getting-started/installation/#typescript","title":"Typescript","text":"<p>ThemaKit is built with TypeScript and includes type definitions for all components. To get the best development experience, we recommend using TypeScript in your project. <pre><code>npm install typescript @types/react @types/react-dom --save-dev\n</code></pre></p>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>After installation, check out our Quick Start guide to begin building with ThemaKit.</p>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":"<p>Get started with ThemaKit in just a few steps! Follow this guide to set up and start using the library in your React project.</p>"},{"location":"getting-started/quick-start/#installation","title":"Installation","text":"<p>First, install the ThemaKit library and its peer dependencies:</p> <pre><code>npm install @themakit/core @themakit/theme react react-dom\n</code></pre> <p>Or, if you use Yarn:</p> <pre><code>yarn add @themakit/core @themakit/theme react react-dom\n</code></pre>"},{"location":"getting-started/quick-start/#setting-up-the-theme","title":"Setting Up the Theme","text":"<p>Wrap your application with the <code>ThemeProvider</code> to apply the ThemaKit theme:</p> <pre><code>import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider, defaultTheme } from '@themakit/theme';\n\nconst App = () =&gt; (\n  &lt;ThemeProvider theme={defaultTheme}&gt;\n    &lt;h1&gt;Hello, ThemaKit!&lt;/h1&gt;\n  &lt;/ThemeProvider&gt;\n);\n\nReactDOM.render(&lt;App /&gt;, document.getElementById('root'));\n</code></pre>"},{"location":"getting-started/quick-start/#using-components","title":"Using Components","text":"<p>Start using ThemaKit components in your application. For example, here\u2019s how to use a <code>Button</code>:</p> <pre><code>import React from 'react';\nimport { Button } from '@themakit/core';\n\nconst App = () =&gt; (\n  &lt;div&gt;\n    &lt;Button variant=\"primary\"&gt;Click Me&lt;/Button&gt;\n  &lt;/div&gt;\n);\n\nexport default App;\n</code></pre>"},{"location":"getting-started/quick-start/#customizing-the-theme","title":"Customizing the Theme","text":"<p>You can customize the default theme to match your design requirements:</p> <pre><code>import { ThemeProvider, createTheme } from '@themakit/theme';\n\nconst customTheme = createTheme({\n  palette: {\n    primary: '#4caf50',\n    accent: '#ff5722',\n  },\n});\n\nconst App = () =&gt; (\n  &lt;ThemeProvider theme={customTheme}&gt;\n    &lt;h1&gt;Custom Theme&lt;/h1&gt;\n  &lt;/ThemeProvider&gt;\n);\n</code></pre> <p>For more details on theming, see the Theming Guide.</p>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the Components section to learn about all available components.</li> <li>Check out the Theming Guide to customize your application\u2019s look and feel.</li> </ul>"},{"location":"theming/custom-themes/","title":"Custom Themes","text":"<p>ThemaKit allows you to create custom themes to match your application's design requirements.</p>"},{"location":"theming/custom-themes/#creating-a-custom-theme","title":"Creating a Custom Theme","text":"<p>You can create a custom theme using the <code>createTheme</code> function.</p> <pre><code>import { createTheme, ThemeProvider } from '@themakit/theme';\n\nconst customTheme = createTheme({\n  palette: {\n    primary: '#4caf50',\n    accent: '#ff5722',\n    background: '#f5f5f5',\n    text: '#212121',\n  },\n  components: {\n    Button: {\n      backgroundColor: '#4caf50',\n      color: '#fff',\n      hoverBackgroundColor: '#388e3c',\n    },\n  },\n});\n\nconst App = () =&gt; (\n  &lt;ThemeProvider theme={customTheme}&gt;\n    &lt;h1&gt;Custom Theme Example&lt;/h1&gt;\n  &lt;/ThemeProvider&gt;\n);\n</code></pre>"},{"location":"theming/custom-themes/#extending-the-default-theme","title":"Extending the Default Theme","text":"<p>You can extend the default theme instead of creating one from scratch.</p> <pre><code>import { defaultTheme, createTheme, ThemeProvider } from '@themakit/theme';\n\nconst extendedTheme = createTheme({\n  ...defaultTheme,\n  palette: {\n    ...defaultTheme.palette,\n    primary: '#2196f3',\n  },\n});\n\nconst App = () =&gt; (\n  &lt;ThemeProvider theme={extendedTheme}&gt;\n    &lt;h1&gt;Extended Theme Example&lt;/h1&gt;\n  &lt;/ThemeProvider&gt;\n);\n</code></pre>"},{"location":"theming/custom-themes/#customizing-components","title":"Customizing Components","text":"<p>You can customize individual components in your theme.</p> <pre><code>const customTheme = createTheme({\n  components: {\n    Card: {\n      backgroundColor: '#fff',\n      borderRadius: '8px',\n      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n    },\n  },\n});\n</code></pre>"},{"location":"theming/custom-themes/#using-multiple-themes","title":"Using Multiple Themes","text":"<p>You can use multiple themes in your application by wrapping different parts of your app with different <code>ThemeProvider</code> instances.</p> <pre><code>const darkTheme = createTheme({\n  palette: {\n    background: '#212121',\n    text: '#fff',\n  },\n});\n\nconst lightTheme = createTheme({\n  palette: {\n    background: '#f5f5f5',\n    text: '#212121',\n  },\n});\n\nconst App = () =&gt; (\n  &lt;div&gt;\n    &lt;ThemeProvider theme={darkTheme}&gt;\n      &lt;div style={{ padding: '16px' }}&gt;Dark Theme Section&lt;/div&gt;\n    &lt;/ThemeProvider&gt;\n    &lt;ThemeProvider theme={lightTheme}&gt;\n      &lt;div style={{ padding: '16px' }}&gt;Light Theme Section&lt;/div&gt;\n    &lt;/ThemeProvider&gt;\n  &lt;/div&gt;\n);\n</code></pre>"},{"location":"theming/custom-themes/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the Theme API for more details on customizing themes.</li> <li>Check out the Components section to see how themes are applied.</li> </ul>"},{"location":"theming/dark-mode/","title":"Dark Mode","text":"<p>ThemaKit supports dark mode, allowing you to create a visually appealing experience for users in low-light environments.</p>"},{"location":"theming/dark-mode/#enabling-dark-mode","title":"Enabling Dark Mode","text":"<p>You can enable dark mode by creating a custom theme with a dark color palette.</p> <pre><code>import { createTheme, ThemeProvider } from '@themakit/theme';\n\nconst darkTheme = createTheme({\n  palette: {\n    background: '#121212',\n    text: '#ffffff',\n    primary: '#bb86fc',\n    accent: '#03dac6',\n  },\n  components: {\n    Button: {\n      backgroundColor: '#bb86fc',\n      color: '#ffffff',\n      hoverBackgroundColor: '#3700b3',\n    },\n  },\n});\n\nconst App = () =&gt; (\n  &lt;ThemeProvider theme={darkTheme}&gt;\n    &lt;h1&gt;Dark Mode Example&lt;/h1&gt;\n  &lt;/ThemeProvider&gt;\n);\n</code></pre>"},{"location":"theming/dark-mode/#switching-between-light-and-dark-mode","title":"Switching Between Light and Dark Mode","text":"<p>You can dynamically switch between light and dark themes based on user preferences or a toggle.</p> <pre><code>import React, { useState } from 'react';\nimport { createTheme, ThemeProvider } from '@themakit/theme';\n\nconst lightTheme = createTheme({\n  palette: {\n    background: '#ffffff',\n    text: '#000000',\n    primary: '#4caf50',\n    accent: '#ff5722',\n  },\n});\n\nconst darkTheme = createTheme({\n  palette: {\n    background: '#121212',\n    text: '#ffffff',\n    primary: '#bb86fc',\n    accent: '#03dac6',\n  },\n});\n\nconst App = () =&gt; {\n  const [isDarkMode, setIsDarkMode] = useState(false);\n\n  return (\n    &lt;ThemeProvider theme={isDarkMode ? darkTheme : lightTheme}&gt;\n      &lt;button onClick={() =&gt; setIsDarkMode(!isDarkMode)}&gt;\n        Toggle Dark Mode\n      &lt;/button&gt;\n      &lt;h1&gt;{isDarkMode ? 'Dark Mode' : 'Light Mode'}&lt;/h1&gt;\n    &lt;/ThemeProvider&gt;\n  );\n};\n</code></pre>"},{"location":"theming/dark-mode/#using-system-preferences","title":"Using System Preferences","text":"<p>You can detect the user's system preference for dark mode using the <code>window.matchMedia</code> API.</p> <pre><code>import React, { useEffect, useState } from 'react';\nimport { createTheme, ThemeProvider } from '@themakit/theme';\n\nconst lightTheme = createTheme({\n  palette: {\n    background: '#ffffff',\n    text: '#000000',\n    primary: '#4caf50',\n    accent: '#ff5722',\n  },\n});\n\nconst darkTheme = createTheme({\n  palette: {\n    background: '#121212',\n    text: '#ffffff',\n    primary: '#bb86fc',\n    accent: '#03dac6',\n  },\n});\n\nconst App = () =&gt; {\n  const [isDarkMode, setIsDarkMode] = useState(\n    window.matchMedia('(prefers-color-scheme: dark)').matches\n  );\n\n  useEffect(() =&gt; {\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = () =&gt; setIsDarkMode(mediaQuery.matches);\n    mediaQuery.addEventListener('change', handleChange);\n    return () =&gt; mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n\n  return (\n    &lt;ThemeProvider theme={isDarkMode ? darkTheme : lightTheme}&gt;\n      &lt;h1&gt;{isDarkMode ? 'Dark Mode' : 'Light Mode'}&lt;/h1&gt;\n    &lt;/ThemeProvider&gt;\n  );\n};\n</code></pre>"},{"location":"theming/dark-mode/#accessibility","title":"Accessibility","text":"<ul> <li>Ensure sufficient contrast between text and background colors in dark mode.</li> <li>Test your application in both light and dark modes to ensure a consistent user experience.</li> </ul>"},{"location":"theming/dark-mode/#next-steps","title":"Next Steps","text":"<ul> <li>Learn more about Custom Themes to further customize your dark mode.</li> <li>Explore the Theme API for advanced theming options.</li> </ul>"},{"location":"theming/overview/","title":"Theming Overview","text":"<p>ThemaKit's theming system allows you to customize the appearance of all components to match your brand identity. The theming system is built to be flexible, type-safe, and easy to use.</p>"},{"location":"theming/overview/#themeprovider","title":"ThemeProvider","text":"<p>To apply a theme, wrap your application with the <code>ThemeProvider</code> component:</p> <pre><code>import { ThemeProvider } from '@themakit/core';\nimport { defaultTheme } from '@themakit/theme';\n\nfunction App() {\n  return (\n    &lt;ThemeProvider theme={defaultTheme}&gt;\n    &lt;/ThemeProvider&gt;\n  );\n}\n</code></pre>"},{"location":"theming/overview/#theme-provider","title":"Theme Provider","text":"<p>A ThemaKit theme is an object with the following structure: <pre><code>const theme = {\n  // Color palette\n  colors: {\n    primary: '#0066ff',\n    secondary: '#6c757d',\n    success: '#28a745',\n    error: '#dc3545',\n    warning: '#ffc107',\n    info: '#17a2b8',\n    // ... other colors\n  },\n\n  // Typography settings\n  typography: {\n    fontFamily: 'Inter, system-ui, sans-serif',\n    fontSize: {\n      xs: '0.75rem',\n      sm: '0.875rem',\n      md: '1rem',\n      lg: '1.125rem',\n      xl: '1.25rem',\n      // ... other sizes\n    },\n    fontWeight: {\n      regular: 400,\n      medium: 500,\n      bold: 700,\n      // ... other weights\n    },\n    lineHeight: {\n      tight: 1.25,\n      normal: 1.5,\n      loose: 1.75,\n      // ... other line heights\n    },\n  },\n\n  // Spacing system\n  spacing: {\n    xs: '0.25rem',\n    sm: '0.5rem',\n    md: '1rem',\n    lg: '1.5rem',\n    xl: '2rem',\n    // ... other spacing values\n  },\n\n  // Border radius\n  borderRadius: {\n    sm: '0.125rem',\n    md: '0.25rem',\n    lg: '0.5rem',\n    pill: '9999px',\n  },\n\n  // Shadows\n  shadows: {\n    sm: '0 1px 2px 0 rgba(0, 0, 0, 0.05)',\n    md: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',\n    lg: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',\n    // ... other shadow values\n  },\n\n  // Component-specific styling\n  components: {\n    Button: {\n      // ... button specific theme options\n    },\n    Card: {\n      // ... card specific theme options\n    },\n    // ... other components\n  }\n};\n</code></pre></p>"},{"location":"theming/overview/#using-built-in-themes","title":"Using Built-in Themes","text":"<p>ThemaKit comes with several built-in themes: <pre><code>import { ThemeProvider } from '@themakit/core';\nimport { defaultTheme, darkTheme, systemTheme } from '@themakit/theme';\n\nfunction App() {\n  return (\n    &lt;ThemeProvider theme={darkTheme}&gt;\n      {/* Your application */}\n    &lt;/ThemeProvider&gt;\n  );\n}\n</code></pre></p>"},{"location":"theming/overview/#creating-custom-themes","title":"Creating Custom Themes","text":"<p>You can create custom themes by extending the default theme: <pre><code>import { createTheme } from '@themakit/theme';\n\nconst customTheme = createTheme({\n  colors: {\n    primary: '#ff4500', // Override primary color\n    secondary: '#2e2e2e',\n  },\n  typography: {\n    fontFamily: 'Poppins, sans-serif',\n  },\n  // ... other overrides\n});\n</code></pre> For more details on customizing specific aspects of the theme, see:</p> <ul> <li>Theme Provider</li> <li>Custom Themes</li> <li>Theme API</li> <li>Dark Mode</li> </ul>"}]}