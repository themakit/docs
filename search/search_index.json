{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ThemaKit","text":"<p>Modern UI Components for React</p> <p>Build beautiful, consistent interfaces with our themeable component library.</p>"},{"location":"#installation","title":"Installation","text":"<p>Get started with ThemaKit in your React project:</p> <p>Installation \u2192</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Fully Customizable: Theme every aspect of your components with our powerful theming system.</li> <li>Type-Safe: Built with TypeScript for a robust development experience.</li> <li>Accessible: WCAG 2.1 compliant components out of the box.</li> <li>Modern Stack: React 18+, CSS-in-JS, and zero jQuery dependencies.</li> </ul>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code>import { ThemeProvider } from '@themakit/core';\nimport { Button } from '@themakit/button';\nimport { defaultTheme } from '@themakit/theme';\n\nfunction App() {\n    return (\n        &lt;ThemeProvider theme={defaultTheme}&gt;\n            &lt;Button variant=\"primary\"&gt;Get Started&lt;/Button&gt;\n        &lt;/ThemeProvider&gt;\n    );\n}\n</code></pre>"},{"location":"components/inputs/button/","title":"Button","text":"<p>The Button component is used to trigger an action or event, such as submitting a form, opening a dialog, canceling an action, or performing a delete operation.</p>"},{"location":"components/inputs/button/#import","title":"Import","text":"<pre><code>import { Button } from '@themakit/button';\n</code></pre>"},{"location":"components/inputs/button/#usage","title":"Usage","text":"<pre><code>&lt;Button variant=\"primary\"&gt;Click Me&lt;/Button&gt;\n</code></pre>"},{"location":"components/inputs/button/#examples","title":"Examples","text":""},{"location":"components/inputs/button/#button-variants","title":"Button Variants","text":"<p>ThemaKit buttons come in several variants to indicate different levels of emphasis.</p> <pre><code>&lt;Button variant=\"primary\"&gt;Primary&lt;/Button&gt;\n&lt;Button variant=\"secondary\"&gt;Secondary&lt;/Button&gt;\n&lt;Button variant=\"outline\"&gt;Outline&lt;/Button&gt;\n&lt;Button variant=\"text\"&gt;Text&lt;/Button&gt;\n&lt;Button variant=\"destructive\"&gt;Delete&lt;/Button&gt;\n</code></pre>"},{"location":"components/inputs/button/#button-sizes","title":"Button Sizes","text":"<p>Buttons are available in different sizes to fit your design needs.</p> <pre><code>&lt;Button size=\"sm\"&gt;Small&lt;/Button&gt;\n&lt;Button size=\"md\"&gt;Medium&lt;/Button&gt;\n&lt;Button size=\"lg\"&gt;Large&lt;/Button&gt;\n</code></pre>"},{"location":"components/inputs/button/#button-states","title":"Button States","text":"<pre><code>&lt;Button&gt;Default&lt;/Button&gt;\n&lt;Button disabled&gt;Disabled&lt;/Button&gt;\n&lt;Button loading&gt;Loading&lt;/Button&gt;\n</code></pre>"},{"location":"components/inputs/button/#with-icon","title":"With Icon","text":"<pre><code>&lt;Button startIcon={&lt;IconName /&gt;}&gt;Start Icon&lt;/Button&gt;\n&lt;Button endIcon={&lt;IconName /&gt;}&gt;End Icon&lt;/Button&gt;\n&lt;Button icon={&lt;IconName /&gt;} aria-label=\"Icon only button\" /&gt;\n</code></pre>"},{"location":"components/inputs/button/#full-width","title":"Full Width","text":"<pre><code>&lt;Button fullWidth&gt;Full Width Button&lt;/Button&gt;\n</code></pre>"},{"location":"components/inputs/button/#props","title":"Props","text":"Prop Type Default Description <code>variant</code> <code>'primary' | 'secondary' | 'outline' | 'text' | 'destructive'</code> <code>'primary'</code> The variant of the button <code>size</code> <code>'sm' | 'md' | 'lg'</code> <code>'md'</code> The size of the button <code>disabled</code> <code>boolean</code> <code>false</code> Whether the button is disabled <code>loading</code> <code>boolean</code> <code>false</code> Whether the button is in a loading state <code>fullWidth</code> <code>boolean</code> <code>false</code> If true, the button will take up the full width of its container <code>startIcon</code> <code>ReactNode</code> Icon to display at the start of the button <code>endIcon</code> <code>ReactNode</code> Icon to display at the end of the button <code>icon</code> <code>ReactNode</code> Icon to display (for icon-only buttons) <code>type</code> <code>'button' | 'submit' | 'reset'</code> <code>'button'</code> The HTML button type <code>onClick</code> <code>(event: React.MouseEvent&lt;HTMLButtonElement&gt;) =&gt; void</code> Function called when the button is clicked <code>ref</code> <code>React.Ref&lt;HTMLButtonElement&gt;</code> Ref forwarded to the button element <p>The Button component also accepts all props that can be passed to a standard HTML button element.</p>"},{"location":"components/inputs/button/#accessibility","title":"Accessibility","text":"<ul> <li>When using the <code>icon</code> prop without text, always provide an <code>aria-label</code> to ensure the button is accessible to screen reader users.</li> <li>The Button component handles keyboard focus and uses appropriate ARIA attributes based on its state.</li> <li>When in a <code>loading</code> state, the button will be marked with <code>aria-busy=\"true\"</code>.</li> </ul>"},{"location":"components/inputs/button/#theming","title":"Theming","text":"<p>You can customize the appearance of the Button component using the theme:</p> <pre><code>// Example theme customization\nconst theme = {\n    components: {\n        Button: {\n            variants: {\n                primary: {\n                    backgroundColor: '#0066ff',\n                    color: 'white',\n                    // ... other styles\n                },\n            },\n            sizes: {\n                sm: {\n                    padding: '0.25rem 0.5rem',\n                    fontSize: '0.875rem',\n                },\n                // ... other sizes\n            },\n        },\n    },\n};\n</code></pre> <p>For more information on theming, see the Theming Guide.</p>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#package-structure","title":"Package Structure","text":"<p>ThemaKit is distributed as a collection of packages under the <code>@themakit</code> scope. This modular approach allows you to install only the components you need.</p>"},{"location":"getting-started/installation/#core-packages","title":"Core Packages","text":"<pre><code># Install the core package (required)\nnpm install @themakit/core\n\n# Install the theme package (recommended)\nnpm install @themakit/theme\n</code></pre>"},{"location":"getting-started/installation/#component-packages","title":"Component Packages","text":"<p>Install only the component packages you need: <pre><code># Layout components\nnpm install @themakit/layout\n\n# Input components\nnpm install @themakit/button @themakit/input @themakit/select @themakit/checkbox\n\n# Display components\nnpm install @themakit/card @themakit/modal @themakit/alert @themakit/toast\n</code></pre></p>"},{"location":"getting-started/installation/#all-in-one-package","title":"All-in-one Package","text":"<p>If you prefer to install everything at once: <pre><code>npm install @themakit/core @themakit/theme @themakit/components\n</code></pre></p>"},{"location":"getting-started/installation/#peer-dependencies","title":"Peer Dependencies","text":"<p>ThemaKit requires the following peer dependencies: <pre><code>npm install react react-dom\n</code></pre> ThemaKit supports React 18 and above.</p>"},{"location":"getting-started/installation/#typescript","title":"Typescript","text":"<p>ThemaKit is built with TypeScript and includes type definitions for all components. To get the best development experience, we recommend using TypeScript in your project. <pre><code>npm install typescript @types/react @types/react-dom --save-dev\n</code></pre></p>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>After installation, check out our Quick Start guide to begin building with ThemaKit.</p>"},{"location":"theming/overview/","title":"Theming Overview","text":"<p>ThemaKit's theming system allows you to customize the appearance of all components to match your brand identity. The theming system is built to be flexible, type-safe, and easy to use.</p>"},{"location":"theming/overview/#themeprovider","title":"ThemeProvider","text":"<p>To apply a theme, wrap your application with the <code>ThemeProvider</code> component:</p> <pre><code>import { ThemeProvider } from '@themakit/core';\nimport { defaultTheme } from '@themakit/theme';\n\nfunction App() {\n  return (\n    &lt;ThemeProvider theme={defaultTheme}&gt;\n    &lt;/ThemeProvider&gt;\n  );\n}\n</code></pre>"},{"location":"theming/overview/#theme-provider","title":"Theme Provider","text":"<p>A ThemaKit theme is an object with the following structure: <pre><code>const theme = {\n  // Color palette\n  colors: {\n    primary: '#0066ff',\n    secondary: '#6c757d',\n    success: '#28a745',\n    error: '#dc3545',\n    warning: '#ffc107',\n    info: '#17a2b8',\n    // ... other colors\n  },\n\n  // Typography settings\n  typography: {\n    fontFamily: 'Inter, system-ui, sans-serif',\n    fontSize: {\n      xs: '0.75rem',\n      sm: '0.875rem',\n      md: '1rem',\n      lg: '1.125rem',\n      xl: '1.25rem',\n      // ... other sizes\n    },\n    fontWeight: {\n      regular: 400,\n      medium: 500,\n      bold: 700,\n      // ... other weights\n    },\n    lineHeight: {\n      tight: 1.25,\n      normal: 1.5,\n      loose: 1.75,\n      // ... other line heights\n    },\n  },\n\n  // Spacing system\n  spacing: {\n    xs: '0.25rem',\n    sm: '0.5rem',\n    md: '1rem',\n    lg: '1.5rem',\n    xl: '2rem',\n    // ... other spacing values\n  },\n\n  // Border radius\n  borderRadius: {\n    sm: '0.125rem',\n    md: '0.25rem',\n    lg: '0.5rem',\n    pill: '9999px',\n  },\n\n  // Shadows\n  shadows: {\n    sm: '0 1px 2px 0 rgba(0, 0, 0, 0.05)',\n    md: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',\n    lg: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',\n    // ... other shadow values\n  },\n\n  // Component-specific styling\n  components: {\n    Button: {\n      // ... button specific theme options\n    },\n    Card: {\n      // ... card specific theme options\n    },\n    // ... other components\n  }\n};\n</code></pre></p>"},{"location":"theming/overview/#using-built-in-themes","title":"Using Built-in Themes","text":"<p>ThemaKit comes with several built-in themes: <pre><code>import { ThemeProvider } from '@themakit/core';\nimport { defaultTheme, darkTheme, systemTheme } from '@themakit/theme';\n\nfunction App() {\n  return (\n    &lt;ThemeProvider theme={darkTheme}&gt;\n      {/* Your application */}\n    &lt;/ThemeProvider&gt;\n  );\n}\n</code></pre></p>"},{"location":"theming/overview/#creating-custom-themes","title":"Creating Custom Themes","text":"<p>You can create custom themes by extending the default theme: <pre><code>import { createTheme } from '@themakit/theme';\n\nconst customTheme = createTheme({\n  colors: {\n    primary: '#ff4500', // Override primary color\n    secondary: '#2e2e2e',\n  },\n  typography: {\n    fontFamily: 'Poppins, sans-serif',\n  },\n  // ... other overrides\n});\n</code></pre> For more details on customizing specific aspects of the theme, see:</p> <ul> <li>Theme Provider</li> <li>Custom Themes</li> <li>Theme API</li> <li>Dark Mode</li> </ul>"}]}